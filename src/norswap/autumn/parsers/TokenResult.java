package norswap.autumn.parsers;

import norswap.autumn.SideEffect;
import java.util.List;

/**
 * An entry in {@link TokenCache}. Indicates a token match over a range of the input, or a failure
 * to match a token at a given position.
 */
final class TokenResult
{
    // ---------------------------------------------------------------------------------------------

    /** The parser that generated this result in {@link Tokens#parsers}. */
    final int parser;

    /** The start position of the token. */
    final int start_position;

    /** The end position of the token. */
    final int end_position;

    /** List of side-effects generated by parsing the token. */
    final List<SideEffect> delta;

    // ---------------------------------------------------------------------------------------------

    TokenResult (int parser, int start_position, int end_position, List<SideEffect> delta)
    {
        this.parser = parser;
        this.start_position = start_position;
        this.end_position = end_position;
        this.delta = delta;
    }

    // ---------------------------------------------------------------------------------------------

    /**
     * Returns a result that indicates that no token was matched at the given position.
     */
    static TokenResult none (int start_position)
    {
        return new TokenResult(-1, start_position, -1, null);
    }

    // ---------------------------------------------------------------------------------------------

    /**
     * Returns true iff the result indicates a token match.
     */
    boolean matched()
    {
        return end_position > 0;
    }

    // ---------------------------------------------------------------------------------------------

    @Override public int hashCode ()
    {
        int result = parser;
        result = 31 * result + start_position;
        result = 31 * result + end_position;
        result = 31 * result + delta.hashCode();
        return result;
    }

    // ---------------------------------------------------------------------------------------------

    @Override public boolean equals (Object o)
    {
        if (this == o) return true;
        if (!(o instanceof TokenResult)) return false;
        TokenResult that = (TokenResult) o;

        return parser == that.parser
            && start_position == that.start_position
            && end_position == that.end_position
            && delta.equals(that.delta);
    }

    // ---------------------------------------------------------------------------------------------

    @Override public String toString ()
    {
        return "TokenResult{" +
            "parser=" + parser +
            ", start_position=" + start_position +
            ", end_position=" + end_position +
            ", delta=" + delta +
            '}';
    }

    // ---------------------------------------------------------------------------------------------
}
